# Redis storage configuration

# Storage

# Storage implementation (full qualified class name)
storage.sync.class = com.github.longkerdandy.mithqtt.storage.redis.sync.RedisSyncSingleStorage

# The in-flight messages were stored in order for each client
# Including:
# QoS 1 and QoS 2 PUBLISH messages which have been sent to the Client, but have not been acknowledged.
# QoS 0, QoS 1 and QoS 2 PUBLISH messages pending transmission to the Client.
# QoS 2 PUBREL messages which have been sent from the Client, but have not been acknowledged.
# To prevent in-flight messages queue keep growing, it's better set this queue size limit.
# If the queue size limit is reached, the oldest in-flight message will be dropped.
# Default and 0 means no limit.
mqtt.inflight.queue.size = 0

# The unacknowledged QoS 2 messages' id were stored in order for each client
# Including:
# QoS 2 PUBLISH messages received but not acknowledged by PUBREL
# If the queue size limit is reached, the oldest QoS 2 message id will be dropped.
# Default and 0 means no limit.
mqtt.qos2.queue.size = 0

# The retain messages were stored in order for each topic
# To prevent retain messages queue keep growing, it's better set this queue size limit.
# If the queue size limit is reached, the oldest retain message will be dropped.
# Default and 0 means no limit.
mqtt.retain.queue.size = 0

# Redis

# Redis server type, could be:
# 1. 'single' :         http://redis.io/topics/config
# 2. 'master_slave' :   http://redis.io/topics/replication
# 3. 'sentinel' :       http://redis.io/topics/sentinel
# 4. 'cluster' :        http://redis.io/topics/cluster-tutorial
redis.type = single

# Redis server address
# 1. 'single' :         host[:port]
# 2. 'master_slave' :   host[:port][,host2[:port2]]
# 3. 'sentinel' :       host[:port][,host2[:port2]]     # this is sentinel address
# 4. 'cluster' :        host[:port][,host2[:port2]]
redis.address = 127.0.0.1:6379

# Redis database number
redis.database = 0

# Redis server password
redis.password =

# Redis sentinel master id
# Only used when redis.type is sentinel
redis.master =