# MQTT Processor Communicator configuration

# Kafka Producer

# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. Data will be load
# balanced over all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only
# impacts the initial hosts used to discover the full set of servers. This list should be in the form
# <code>host1:port1,host2:port2,...</code>. Since these servers are just used for the initial connection to
# discover the full cluster membership (which may change dynamically), this list need not contain the full set of
# servers (you may want more than one, though, in case a server is down). If no server in this list is available sending
# data will fail until on becomes available.
bootstrap.servers =

# The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the
# durability of records that are sent. The following settings are common:
# <ul>
# <li><code>acks=0</code> If set to zero then the producer will not wait for any acknowledgment from the
# server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be
# made that the server has received the record in this case, and the <code>retries</code> configuration will not
# take effect (as the client won't generally know of any failures). The offset given back for each record will
# always be set to -1.
# <li><code>acks=1</code> This will mean the leader will write the record to its local log but will respond
# without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after
# acknowledging the record but before the followers have replicated it then the record will be lost.
# <li><code>acks=all</code> This means the leader will wait for the full set of in-sync replicas to
# acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica
# remains alive. This is the strongest available guarantee.
acks = 1


# Kafka Consumer

# Specifies the ZooKeeper connection string in the form hostname:port where host and port are the host and port of a ZooKeeper server.
# To allow connecting through other ZooKeeper nodes when that ZooKeeper machine is down
# you can also specify multiple hosts in the form hostname1:port1,hostname2:port2,hostname3:port3.
# The server may also have a ZooKeeper chroot path as part of it's ZooKeeper connection string
# which puts its data under some path in the global ZooKeeper namespace.
# If so the consumer should use the same chroot path in its connection string.
# For example to give a chroot path of /chroot/path
# you would give the connection string as hostname1:port1,hostname2:port2,hostname3:port3/chroot/path.
zookeeper.connect =

# A string that uniquely identifies the group of consumer processes to which this consumer belongs.
# By setting the same group id multiple processes indicate that they are all part of the same consumer group.
group.id = mithril.mqtt.processor.consumer