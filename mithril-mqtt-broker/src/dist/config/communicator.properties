# Communicator configuration

# Communicator

# Communicator implementation (full qualified class name)
communicator.class = com.github.longkerdandy.mithril.mqtt.communicator.hazelcast.broker.HazelcastBrokerCommunicator

# This is the topic prefix that broker instance consume. (full topic is like mithril.mqtt.broker.{brokerId})
# You should create this Kafka topics before starting each broker.
# In Kafka there cannot be more consumer instances than partitions.
# eg. Each broker instance running 4 consumer threads, which means there should be at least 4 partitions.
communicator.broker.topic = mithril.mqtt.broker

# This is the topic that all processor instance consume with the same consumer group. (to achieve load balance)
# You should create this Kafka topic before starting processor.
# In Kafka there cannot be more consumer instances than partitions.
# eg. There are 4 processor instances, each running 16 consumer threads, which means there should be at least 64 partitions.
communicator.processor.topic = mithril.mqtt.processor

# This is the topic that processor will pass message to 3rd party application
# You should create this Kafka topic before starting processor & your application.
communicator.application.topic = mithril.mqtt.application

# Hazelcast

# The number of threads reading from hazelcast ringbuffer
consumer.threads = 4
